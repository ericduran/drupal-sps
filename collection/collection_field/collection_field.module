<?php

/**
 * Implements hook_menu().
 */
function collection_field_menu() {
  $items = array();

  $items['collection/autocomplete'] = array(
    'page callback' => 'collection_field_autocomplete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements of hook_field_info().
 */
function collection_field_field_info() {
  return array(
    'collection' => array(
      'label' => t('Collection'),
      'description' => t(''),
      'default_widget' => 'collection',
      'default_formatter' => 'collection',
    ),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function collection_field_widget_info() {
  return array(
    'collection' => array(
      'label' => t('Collection'),
      'field types' => array('collection'),
      'settings' => array(),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function collection_field_formatter_info() {
  return array(
    'collection' => array(
      'label' => t('Default'),
      'field types' => array('collection'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view()
 */
function collection_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $output = array();
  if (!empty($items)) {
    foreach ($items as $item) {
      $output[] = $item['value'];
    }
    return array(array('#markup' => implode(', ', $output)));
  }

  return '';
}

/**
 * Implements hook_field_widget_form().
 */
function collection_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $current_collections = collection_field_get_collections($element['#entity'], $element['#entity_type'], $element['#field_name']);
  $options = collection_get_collection_list();
  foreach ($current_collections as $condition) {
    unset($options[$condition->identifier()]);
  }

  array_unshift($options, t('Select'));

  $element += array(
    'value' => array(
      '#type' => 'select',
      '#options' => $options,
      '#default_value' => isset($items[$delta]['value']) ? $items[$delta]['value'] : '',
    )
  );

  return $element;
}

/**
 * Implements hook_field_is_empty().
 */
function collection_field_field_is_empty($item, $field) {
  if (empty($item) && empty($item['value']) && (string) $item['value'] !== '0') {
    return TRUE;
  }
  return FALSE;
}

/**
 * Get the collections for an entity
 *
 * @param $entity
 * @param $entity_type
 * @param $field_name
 * @param $collection_name
 *
 * @return array
 */
function collection_field_get_collections($entity, $entity_type, $field_name) {
  $entity_info = entity_get_info($entity_type);
  $id_key = $entity_info['entity keys']['id'];

  $query = new EntityFieldQuery();
  $values = $query->entityCondition('entity_type', $entity_type)
    ->age(FIELD_LOAD_REVISION)
    ->entityCondition('entity_id', $entity->$id_key)
    ->execute();

  if (empty($values[$entity_type])) {
    return array();
  }

  $colleciton_ids = array_keys($values[$entity_type]);
  return collection_load_multiple($colleciton_ids);
}

<?php
class SPSQueryAlterReactionUnitTest extends SPSBaseUnitTest {
  static function getInfo() {
    return array(
      'name' => 'SPS Query Alter Reaction Unit Tests',
      'description' => 'Test the public interface to the Query Alter Reaction objects',
      'group' => 'SPS',
    );
  }

  public function test_QueryAlterReaction_NodeAddTable() {
    $query = new \Drupal\sps\Test\QueryAlterable($this->addTable_start());
    $controller = new \Drupal\sps\Test\TableOverrideStorageController();
    $reaction = $this->getNodeReaction();

    $reaction->react($query, $controller);
    $result = \Drupal\sps\Test\QueryAlterable::extractConfig($query);
    $expected = $this->addTable_start();
    $expected['tables']['node_overrides'] = array (
      'join type' => 'LEFT OUTER',
      'table' => 'test_override',
      'alias' => 'node_overrides',
      'condition' => 'b.nid = node_overrides.id',
      'arguments' => array (),
    );
    $this->assertEqual(
      $result['tables'],
      $expected['tables'],
      "::react alter a query to change the alais of the vid field and add the overrides table"
    );
  }

  public function test_QueryAlterReaction_NodeVidField() {
    $query = new \Drupal\sps\Test\QueryAlterable($this->vidField_start());
    $controller = new \Drupal\sps\Test\TableOverrideStorageController();
    $reaction = $this->getNodeReaction();

    $reaction->react($query, $controller);
    $result = \Drupal\sps\Test\QueryAlterable::extractConfig($query);
    $expected = $this->vidField_start();
    $expected['fields']['vid']['table'] = 'node_overrides';
    $this->assertEqual(
      $result['fields'],
      $expected['fields'],
      "::react alter a query to change the alais of the vid field"
    );
  }
 
  public function test_QueryAlterReaction_revisionFields() {
    $query = new \Drupal\sps\Test\QueryAlterable($this->revisionFields_start());
    $info = $this->getNodeReactionInfo();

    $controller = new \Drupal\sps\Test\TableOverrideStorageController();
    $reaction = $this->getNodeReaction();
    $reaction->react($query, $controller);
    $result = \Drupal\sps\Test\QueryAlterable::extractConfig($query);

    $expected = $this->revisionFields_start();
    $expected['fields']['title']['table'] = 'r';
    $expected['fields']['status']['table'] = 'r';
    $expected['fields']['promote']['table'] = 'r';
    $expected['fields']['sticky']['table'] = 'r';

    $this->assertEqual(
      $result['fields'],
      $expected['fields'],
      "::react alter a query changing the table of all fields on the base table in revisions_fields to the revision table alias"
    );

    $this->assertEqual(
      array_keys($result['tables']),
      array('b', 'node_overrides', 'r'),
      "::react alter a query so that the overrides table is right after the base table"
    );

    $this->assertEqual(
      $result['tables']['r']['condition'],
      'r.vid = COALESCE(node_overrides.vid, b.vid)',
      "::react alter a query so that the revision table joins on a coalesce of the overides and the base revision ids"
    );

    $result = \Drupal\sps\Test\QueryAlterable::extractConfig($query);

    $this->assertEqual(
      $result['where->conditions'][0]['field'],
      'r.status',
      "::react alter a query so that conditions that reference revision fields on the base, are change to the revision table"
    );

    $this->assertEqual(
      $result['expressions']['expression']['expression'],
      'r.title is NULL', 
      "::react alter a query so that expressions that reference revision fields on the base, are change to the revision table"
    );

    $this->assertEqual(
      $result['order'],
      array ('r.sticky' => 'ASC', 'r.title' => 'ASC'),
      "::react alter a query so that order fields that reference revision fields on the base, are change to the revision table"
    );
  }
  public function test_QueryAlterReaction_groupBy() {
    $query = new \Drupal\sps\Test\QueryAlterable($this->groupBy_start());
    $info = $this->getNodeReactionInfo();

    $controller = new \Drupal\sps\Test\TableOverrideStorageController();
    $reaction = $this->getNodeReaction();
    $reaction->react($query, $controller);
    $result = \Drupal\sps\Test\QueryAlterable::extractConfig($query);

    $this->assertEqual(
      $result['group'],
      array ('r.uid' => 'r.uid', 'u.name' => 'u.name'),
      "::react alter a query so that group by fields that reference revision fields on the base, are change to the revision table"
    );

    $this->assertEqual(
      $result['having->conditions'][0]['field'],
      'COUNT(r.status) > 1',
      "::react alter a query so that fields that reference revision fields on the base, are change to the revision table in having clauses"
    );
  }
  protected function getNodeReactionInfo() {
    return array(
      'entities' => array(
        array(
          'base_table'=>'node', 
          'revision_table' => 'node_revision',
          'base_id' => 'nid',
          'revision_id' => 'vid',
          'revision_fields' => array('title', 'status', 'promote', 'sticky', 'uid'),
        )
      )
    );
  }
  protected function getNodeReaction() {
     $manager = new \Drupal\sps\Test\Manager();
     $reaction = new \Drupal\sps\Plugins\Reaction\QueryAlterReaction(
      $this->getNodeReactionInfo(),
      $manager
    );
    return $reaction;
  }

  protected function addTable_start() {
    return array (
      'forUpdate' => false,
      'prepared' => false,
      'union' => 
      array (
      ),
      'range' => NULL,
      'distinct' => false,
      'having->conditions' => 
      array (
        '#conjunction' => 'AND',
      ),
      'where->conditions' => 
      array (
        '#conjunction' => 'AND',
      ),
      'group' => 
      array (
      ),
      'order' => 
      array (
      ),
      'tables' => 
      array (
        'b' => 
        array (
          'join type' => NULL,
          'table' => 'node',
          'alias' => 'b',
          'condition' => NULL,
          'arguments' => 
          array (
          ),
        ),
      ),
      'expressions' => 
      array (
      ),
      'fields' => 
      array (
        'nid' => 
        array (
          'field' => 'nid',
          'table' => 'b',
          'alias' => 'nid',
        ),
      ),
    );
  }
  protected function vidField_start() {
    return array (
      'forUpdate' => false,
      'prepared' => false,
      'union' => 
      array (
      ),
      'range' => NULL,
      'distinct' => false,
      'having->conditions' => 
      array (
        '#conjunction' => 'AND',
      ),
      'where->conditions' => 
      array (
        '#conjunction' => 'AND',
      ),
      'group' => 
      array (
      ),
      'order' => 
      array (
      ),
      'tables' => 
      array (
        'b' => 
        array (
          'join type' => NULL,
          'table' => 'node',
          'alias' => 'b',
          'condition' => NULL,
          'arguments' => 
          array (
          ),
        ),
      ),
      'expressions' => 
      array (
      ),
      'fields' => 
      array (
        'nid' => 
        array (
          'field' => 'nid',
          'table' => 'b',
          'alias' => 'nid',
        ),
        'vid' => 
        array (
          'field' => 'vid',
          'table' => 'b',
          'alias' => 'vid',
        ),
      ),
    );
  }
  protected function revisionFields_start() {
    return array (
      'forUpdate' => false,
      'prepared' => false,
      'union' => 
      array (
      ),
      'range' => NULL,
      'distinct' => false,
      'having->conditions' => 
      array (
        '#conjunction' => 'AND',
      ),
      'where->conditions' => 
      array (
        '#conjunction' => 'AND',
        0 => 
        array (
          'field' => 'b.status',
          'value' => 1,
          'operator' => '=',
        ),
      ),
      'group' => 
      array (
      ),
      'order' => 
      array (
        'b.sticky' => 'ASC',
        'b.title' => 'ASC',
      ),
      'tables' => 
      array (
        'b' => 
        array (
          'join type' => NULL,
          'table' => 'node',
          'alias' => 'b',
          'condition' => NULL,
          'arguments' => 
          array (
          ),
        ),
        'r' => 
        array (
          'join type' => 'INNER',
          'table' => 'node_revision',
          'alias' => 'r',
          'condition' => 'r.vid = b.vid',
          'arguments' => 
          array (
          ),
        ),
      ),
      'expressions' => 
      array (
        'expression' => 
        array (
          'expression' => 'b.title is NULL',
          'alias' => 'expression',
          'arguments' => 
          array (
          ),
        ),
      ),
      'fields' => 
      array (
        'title' => 
        array (
          'field' => 'title',
          'table' => 'b',
          'alias' => 'title',
        ),
        'status' => 
        array (
          'field' => 'status',
          'table' => 'b',
          'alias' => 'status',
        ),
        'promote' => 
        array (
          'field' => 'promote',
          'table' => 'b',
          'alias' => 'promote',
        ),
        'sticky' => 
        array (
          'field' => 'sticky',
          'table' => 'b',
          'alias' => 'sticky',
        ),
      ),
    ); 
  }
  protected function groupBy_start() {
     return array (
      'forUpdate' => false,
      'prepared' => false,
      'union' => 
      array (
      ),
      'range' => NULL,
      'distinct' => false,
      'having->conditions' => 
      array (
        '#conjunction' => 'AND',
        0 => 
        array (
          'field' => 'COUNT(b.status) > 1',
          'value' => 
          array (
          ),
          'operator' => NULL,
        ),
      ),
      'where->conditions' => 
      array (
        '#conjunction' => 'AND',
      ),
      'group' => 
      array (
        'b.uid' => 'b.uid',
        'u.name' => 'u.name',
      ),
      'order' => 
      array (
      ),
      'tables' => 
      array (
        'b' => 
        array (
          'join type' => NULL,
          'table' => 'node',
          'alias' => 'b',
          'condition' => NULL,
          'arguments' => 
          array (
          ),
        ),
        'r' => 
        array (
          'join type' => 'INNER',
          'table' => 'node_revision',
          'alias' => 'r',
          'condition' => 'r.vid = b.vid',
          'arguments' => 
          array (
          ),
        ),
        'u' => 
        array (
          'join type' => 'INNER',
          'table' => 'user',
          'alias' => 'u',
          'condition' => 'u.uid = b.uid',
          'arguments' => 
          array (
          ),
        ),
      ),
      'expressions' => 
      array (
      ),
      'fields' => 
      array (
        'u.name' => 
        array (
          'field' => 'u.name',
          'table' => 'u',
          'alias' => 'u.name',
        ),
      ),
    ); 
  }
}

<?php

use Drupal\sps\Exception as SPSException;

class SPSPluginUnitTest extends SPSBaseUnitTest {
  static function getInfo() {
    return array(
      'name' => 'SPS Plugin Unit Tests',
      'description' => 'SPS Plugin Tests.',
      'group' => 'SPS',
    );
  }

  public function testPluginFactory() {
    $factory = new Drupal\sps\Plugin\PluginFactory();

    try {
      $factory = sps_get_plugin_factory();
      $this->pass('Plugin Factory Loaded', "SPS");
      return;
    } catch (\SPSException\ClassLoadException $e) {
      $this->fail('Plugin Factory Loaded', "SPS");
      return;
    } catch (Exception $e) {
      $this->fail('Plugin Factory Loaded', "SPS");
      $this->fail('Plugin Factory Exception was not used', "SPS");
      return;
    }
  }

  public function testPluginLoading() {
    try {
      $plugin = sps_get_plugin('not_valid_type', 'not_valid_key');
      $this->fail("Plugin Not Loaded", "SPS");

    } catch (\Drupal\sps\Exception\InvalidPluginException $e) {
      $this->pass("Plugin Not Loaded", "SPS");
    }

    try {
      $plugin = sps_get_plugin('test_type', 'test_type_1');
      $this->pass("Plugin Loaded", "SPS");
    } catch (Drupal\sps\Exception\InvalidPluginException $e) {
      $this->fail("Plugin loaded", "SPS");
    }

    $plugin_type = sps_get_plugin_type('test_type');
    $plugin_2 = sps_get_plugin('test_type', 'test_type_2');
    $class_name = $plugin_type->getDefaultPluginClass();
    if ($plugin_2 instanceof $class_name) {
      $this->pass("Default Plugin Loaded", "SPS");
    }
    else {
      $this->fail("Default Plugin Loaded", "SPS");
    }

    $this->assertIsPlugin($plugin);
    $this->assertIsPlugin($plugin_2);

    $plugins = sps_get_plugin('test_type');
    if ($plugins instanceof Drupal\sps\Plugin\PluginCollection) {
      $this->pass("Plugin Collection Class loaded via function", "SPS");
    }
    else {
      $this->fail("Plugin Collection Class loaded via function", "SPS");
    }
  }

  public function testPluginType() {
    try {
      $plugin_type = sps_get_plugin_type("fake_plugin");
    } catch (\SPSException\ClassLoadException $e) {
      $this->pass("Fake Plugin Type not Loaded", "SPS");
    }

    try {
      $plugin_type = sps_get_plugin_type("test_type");
    } catch (\SPSException\ClassLoadException $e) {
      $this->fail("Load Plugin Type", "SPS");
    }

    $this->assertCheckInterface("Drupal\\sps\\Plugin\\PluginTypeInterface",
      $plugin_type, "Plugin Type is using the correct interface");

    $custom_plugin_type = sps_get_plugin_type('custom_type');

    if ($custom_plugin_type instanceof Drupal\sps_test\SPS\Plugin\PluginType) {
      $this->pass('Custom Plugin Type Class Loaded');
    }
    else {
      $this->fail('Custom Plugin Type Loaded');
    }

    if ($plugin_type instanceof Drupal\sps\Plugin\PluginType) {
      $this->pass('Default Plugin Type Class Loaded');
    }
    else {
      $this->fail('Default Plugin Type Class Loaded');
    }

    $plugins = $plugin_type->getPlugins();
    if ($plugins instanceof Drupal\sps\Plugin\PluginCollection) {
      $this->pass("Plugin Collection Class loaded via function", "SPS");
    }
    else {
      $this->fail("Plugin Collection Class loaded via function", "SPS");
    }

    $this->_pluginTypeDefinitions($plugin_type, 'test_type');
    $this->_pluginTypeDefinitions($custom_plugin_type, 'custom_type');
  }

  protected function _pluginTypeDefinitions($plugin_type, $type_name) {
    $plugin_types_info = sps_sps_plugin_types();

    $info_keys = array(
      'module',
      'name',
      'class',
      'plugin_class',
      'interface',
      'defaults',
    );

    $plugin_info = array();
    foreach($info_keys as $key) {
      $plugin_info[$key] = $plugin_type->getDefinition($key);
    }

    $this->assertEqual($plugin_info, $plugin_types_info[$type_name], "Plugin Type Definition Loaded", "SPS");
  }

  /**
   * Reuse this in other plugin test to verify the plugin interface is correct
   *
   * @param $plugin
   */
  protected function assertIsPlugin($plugin) {
    $this->assertCheckInterface("Drupal\\sps\\Plugin\\PluginInterface", $plugin, "Invalid Plugin");
  }

  /**
   * Check if the class is a certain plugin type
   */
  protected function assertIsPluginType($plugin, $type) {
    $interface = 'Drupal\\sps\\Plugin\\Type\\' . $type . "Interface";
    $this->assertCheckInterface($interface, $plugin, "Plugin is of type $type");
  }
}

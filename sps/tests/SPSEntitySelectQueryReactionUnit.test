<?php
class SPSEntitySelectQueryAlterReactionUnitTest extends SPSBaseUnitTest {
  static function getInfo() {
    return array(
      'name' => 'SPS Entity Select Query Alter Reaction Unit Tests',
      'description' => 'Test the public interface to the Query Alter Reaction objects',
      'group' => 'SPS',
    );
  }

  public function test_EntitySelectQueryAlterReaction_NodeAddTable() {
    
    $query = $this->addTable_start();
    $controller = $this->getTestCondition();
    $reaction = $this->getNodeReaction();
    $data= new stdClass();
    $data->query = $query;
    $reaction->react($data, $controller);
    $expected = $this->addTable_start();
    $expected->tables['node_overrides'] = array (
      'join type' => 'LEFT OUTER',
      'table' => 'test_override',
      'alias' => 'node_overrides',
      'condition' => 'b.nid = node_overrides.id',
      'arguments' => array (),
    );
    $this->assertEqual(
      $query->tables,
      $expected->tables,
      "::react alter a query and adds the overrides table"
    );
  }

  public function test_EntitySelectQueryAlterReaction_NodeVidField() {
    $query = $this->vidField_start();
    $controller = $this->getTestCondition();
    $reaction = $this->getNodeReaction();

    $data= new stdClass();
    $data->query = $query;
    $reaction->react($data, $controller);
    $this->assertEqual(
      $query->fields['vid']['table'],
      'node_overrides',
      "::react alter a query to change the alais of the vid field"
    );
  }
 
  public function test_EntitySelectQueryAlterReaction_revisionFields() {
    $query = $this->revisionFields_start();
    $info = $this->getNodeReactionInfo();

    $controller = $this->getTestCondition();
    $reaction = $this->getNodeReaction();
    $data= new stdClass();
    $data->query = $query;
    $reaction->react($data, $controller);

    $expected = $this->revisionFields_start();
    $expected->fields['title']['table'] = 'r';
    $expected->fields['status']['table'] = 'r';
    $expected->fields['promote']['table'] = 'r';
    $expected->fields['sticky']['table'] = 'r';
    $expected->fields['uid']['table'] = 'r';

    $this->assertEqual(
      $query->fields,
      $expected->fields,
      "::react alter a query changing the table of all fields on the base table in revisions_fields to the revision table alias"
    );

    $this->assertEqual(
      array_keys($query->tables),
      array('b', 'node_overrides', 'r'),
      "::react alter a query so that the overrides table is right after the base table"
    );

    $this->assertEqual(
      $query->tables['r']['condition'],
      'r.vid = COALESCE(node_overrides.revision_id, b.vid)',
      "::react alter a query so that the revision table joins on a coalesce of the overides and the base revision ids"
    );

    $this->assertEqual(
      $query->where->conditions[0]['field'],
      'r.status',
      "::react alter a query so that conditions that reference revision fields on the base, are change to the revision table"
    );

    $this->assertEqual(
      $query->expressions['expression']['expression'],
      'r.title is NULL', 
      "::react alter a query so that expressions that reference revision fields on the base, are change to the revision table"
    );

    $this->assertEqual(
      $query->order,
      array ('r.sticky' => 'ASC', 'r.title' => 'ASC'),
      "::react alter a query so that order fields that reference revision fields on the base, are change to the revision table"
    );
  }
  public function test_EntitySelectQueryAlterReaction_groupBy() {
    $query = $this->groupBy_start();
    $info = $this->getNodeReactionInfo();

    $controller = $this->getTestCondition();
    $reaction = $this->getNodeReaction();
    $data= new stdClass();
    $data->query = $query;
    $reaction->react($data, $controller);

    $this->assertEqual(
      $query->group,
      array ('r.uid' => 'r.uid', 'u.name' => 'u.name'),
      "::react alter a query so that group by fields that reference revision fields on the base, are change to the revision table"
    );

    $this->assertEqual(
      $query->having->conditions[0]['field'],
      'COUNT(r.status) > 1',
      "::react alter a query so that fields that reference revision fields on the base, are change to the revision table in having clauses"
    );
  }
  public function test_EntitySelectQueryAlterReaction_subCondition() {
    $query = $this->groupBy_start();
    $info = $this->getNodeReactionInfo();

    $controller = $this->getTestCondition();
    $reaction = $this->getNodeReaction();
    $data= new stdClass();
    $data->query = $query;
    $reaction->react($data, $controller);
   
    $this->assertEqual(
      $query->where->conditions[0]['field']->conditions[0]['field'],
      'r.sticky',
      "::react alter a query so that sub conditions that reference revision fields on the base, are change to the revision table"
    );
  }

  public function test_EntitySelectQueryAlterReaction_noAlter() {
    $query = $this->noAlter_start();
    $info = $this->getNodeReactionInfo();

    $controller = $this->getTestCondition();
    $reaction = $this->getNodeReaction();
    $data= new stdClass();
    $data->query = $query;
    $reaction->react($data, $controller);
   
    $this->assertEqual(
      $query,
      $this->noAlter_start(),
      "::react does not alter queries with the SPS_NO_ALTER_QUERY_TAG tag"
    );
  }

  protected function getNodeReactionInfo() {
    return array(
      'entities' => array(
        array(
          'base_table'=>'node', 
          'revision_table' => 'node_revision',
          'base_id' => 'nid',
          'revision_id' => 'vid',
          'revision_fields' => array('title', 'status', 'promote', 'sticky', 'uid'),
        )
      )
    );
  }
  protected function getTestCondition() {
    $manager = new \Drupal\sps\Test\Manager();
    return new \Drupal\sps\Test\TableOverrideStorageController(array(), $manager);
  }
  protected function getNodeReaction() {
     $manager = new \Drupal\sps\Test\Manager();
     $reaction = new \Drupal\sps\Plugins\Reaction\EntitySelectQueryAlterReaction(
      $this->getNodeReactionInfo(),
      $manager
    );
    return $reaction;
  }

  protected function addTable_start() {
    return Drupal\sps\Test\SelectQuery::__set_state(array(
       'fields' => 
      array (
        'nid' => 
        array (
          'field' => 'nid',
          'table' => 'b',
          'alias' => 'nid',
        ),
      ),
       'expressions' => 
      array (
      ),
       'tables' => 
      array (
        'b' => 
        array (
          'join type' => NULL,
          'table' => 'node',
          'alias' => 'b',
          'condition' => NULL,
          'arguments' => 
          array (
          ),
        ),
      ),
       'order' => 
      array (
      ),
       'group' => 
      array (
      ),
       'where' => 
      Drupal\sps\Test\DatabaseCondition::__set_state(array(
         'conditions' => 
        array (
          '#conjunction' => 'AND',
        ),
         'arguments' => 
        array (
        ),
         'changed' => true,
         'queryPlaceholderIdentifier' => NULL,
      )),
       'having' => 
      Drupal\sps\Test\DatabaseCondition::__set_state(array(
         'conditions' => 
        array (
          '#conjunction' => 'AND',
        ),
         'arguments' => 
        array (
        ),
         'changed' => true,
         'queryPlaceholderIdentifier' => NULL,
      )),
       'distinct' => false,
       'range' => NULL,
       'union' => 
      array (
      ),
       'prepared' => false,
       'forUpdate' => false,
       'connectionTarget' => 'default',
       'connectionKey' => 'default',
       'queryOptions' => 
      array (
        'target' => 'default',
        'return' => 1,
      ),
       'uniqueIdentifier' => '5004e1ce871882.19828660',
       'nextPlaceholder' => 0,
       'comments' => 
      array (
      ),
    ));
  }
  protected function vidField_start() {
    return Drupal\sps\Test\SelectQuery::__set_state(array(
       'fields' => 
      array (
        'vid' => 
        array (
          'field' => 'vid',
          'table' => 'b',
          'alias' => 'vid',
        ),
      ),
       'expressions' => 
      array (
      ),
       'tables' => 
      array (
        'b' => 
        array (
          'join type' => NULL,
          'table' => 'node',
          'alias' => 'b',
          'condition' => NULL,
          'arguments' => 
          array (
          ),
        ),
      ),
       'order' => 
      array (
      ),
       'group' => 
      array (
      ),
       'where' => 
      Drupal\sps\Test\DatabaseCondition::__set_state(array(
         'conditions' => 
        array (
          '#conjunction' => 'AND',
        ),
         'arguments' => 
        array (
        ),
         'changed' => true,
         'queryPlaceholderIdentifier' => NULL,
      )),
       'having' => 
      Drupal\sps\Test\DatabaseCondition::__set_state(array(
         'conditions' => 
        array (
          '#conjunction' => 'AND',
        ),
         'arguments' => 
        array (
        ),
         'changed' => true,
         'queryPlaceholderIdentifier' => NULL,
      )),
       'distinct' => false,
       'range' => NULL,
       'union' => 
      array (
      ),
       'prepared' => false,
       'forUpdate' => false,
       'connectionTarget' => 'default',
       'connectionKey' => 'default',
       'queryOptions' => 
      array (
        'target' => 'default',
        'return' => 1,
      ),
       'uniqueIdentifier' => '5004e417107c22.99425880',
       'nextPlaceholder' => 0,
       'comments' => 
      array (
      ),
    ));
  }
  protected function revisionFields_start() {
     return Drupal\sps\Test\SelectQuery::__set_state(array(
       'fields' => 
      array (
        'sticky' => 
        array (
          'field' => 'sticky',
          'table' => 'b',
          'alias' => 'sticky',
        ),
        'title' => 
        array (
          'field' => 'title',
          'table' => 'b',
          'alias' => 'title',
        ),
        'status' => 
        array (
          'field' => 'status',
          'table' => 'b',
          'alias' => 'status',
        ),
        'uid' => 
        array (
          'field' => 'uid',
          'table' => 'b',
          'alias' => 'uid',
        ),
        'promote' => 
        array (
          'field' => 'promote',
          'table' => 'b',
          'alias' => 'promote',
        ),
      ),
       'expressions' => 
      array (
        'expression' => 
        array (
          'expression' => 'b.title is NULL',
          'alias' => 'expression',
          'arguments' => 
          array (
          ),
        ),
      ),
       'tables' => 
      array (
        'b' => 
        array (
          'join type' => NULL,
          'table' => 'node',
          'alias' => 'b',
          'condition' => NULL,
          'arguments' => 
          array (
          ),
        ),
        'r' => 
        array (
          'join type' => 'INNER',
          'table' => 'node_revision',
          'alias' => 'r',
          'condition' => 'r.vid = b.vid',
          'arguments' => 
          array (
          ),
        ),
      ),
       'order' => 
      array (
        'b.sticky' => 'ASC',
        'b.title' => 'ASC',
      ),
       'group' => 
      array (
      ),
       'where' => 
      Drupal\sps\Test\DatabaseCondition::__set_state(array(
         'conditions' => 
        array (
          '#conjunction' => 'AND',
          0 => 
          array (
            'field' => 'b.status',
            'value' => 1,
            'operator' => '=',
          ),
        ),
         'arguments' => 
        array (
        ),
         'changed' => true,
         'queryPlaceholderIdentifier' => NULL,
      )),
       'having' => 
      Drupal\sps\Test\DatabaseCondition::__set_state(array(
         'conditions' => 
        array (
          '#conjunction' => 'AND',
        ),
         'arguments' => 
        array (
        ),
         'changed' => true,
         'queryPlaceholderIdentifier' => NULL,
      )),
       'distinct' => false,
       'range' => NULL,
       'union' => 
      array (
      ),
       'prepared' => false,
       'forUpdate' => false,
       'connectionTarget' => 'default',
       'connectionKey' => 'default',
       'queryOptions' => 
      array (
        'target' => 'default',
        'return' => 1,
      ),
       'uniqueIdentifier' => '5004e873f40640.15709914',
       'nextPlaceholder' => 0,
       'comments' => 
      array (
      ),
    )); 
  }
  protected function groupBy_start() {
     return Drupal\sps\Test\SelectQuery::__set_state(array(
       'fields' => 
      array (
      ),
       'expressions' => 
      array (
      ),
       'tables' => 
      array (
        'b' => 
        array (
          'join type' => NULL,
          'table' => 'node',
          'alias' => 'b',
          'condition' => NULL,
          'arguments' => 
          array (
          ),
        ),
        'r' => 
        array (
          'join type' => 'INNER',
          'table' => 'node_revision',
          'alias' => 'r',
          'condition' => 'r.vid = b.vid',
          'arguments' => 
          array (
          ),
        ),
        'u' => 
        array (
          'join type' => 'INNER',
          'table' => 'user',
          'alias' => 'u',
          'condition' => 'u.uid = b.uid',
          'arguments' => 
          array (
          ),
        ),
      ),
       'order' => 
      array (
      ),
       'group' => 
      array (
        'b.uid' => 'b.uid',
        'u.name' => 'u.name',
      ),
       'where' => 
      Drupal\sps\Test\DatabaseCondition::__set_state(array(
         'conditions' => 
        array (
          '#conjunction' => 'AND',
          0 => 
          array (
            'field' => 
            Drupal\sps\Test\DatabaseCondition::__set_state(array(
               'conditions' => 
              array (
                '#conjunction' => 'OR',
                0 => 
                array (
                  'field' => 'b.sticky',
                  'value' => 1,
                  'operator' => '=',
                ),
                1 => 
                array (
                  'field' => 'b.promote',
                  'value' => 1,
                  'operator' => '=',
                ),
              ),
               'arguments' => 
              array (
              ),
               'changed' => true,
               'queryPlaceholderIdentifier' => NULL,
            )),
            'value' => NULL,
            'operator' => 'IS NULL',
          ),
        ),
         'arguments' => 
        array (
        ),
         'changed' => true,
         'queryPlaceholderIdentifier' => NULL,
      )),
       'having' => 
      Drupal\sps\Test\DatabaseCondition::__set_state(array(
         'conditions' => 
        array (
          '#conjunction' => 'AND',
          0 => 
          array (
            'field' => 'COUNT(b.status) > 1',
            'value' => 
            array (
            ),
            'operator' => NULL,
          ),
        ),
         'arguments' => 
        array (
        ),
         'changed' => true,
         'queryPlaceholderIdentifier' => NULL,
      )),
       'distinct' => false,
       'range' => NULL,
       'union' => 
      array (
      ),
       'prepared' => false,
       'forUpdate' => false,
       'connectionTarget' => 'default',
       'connectionKey' => 'default',
       'queryOptions' => 
      array (
        'target' => 'default',
        'return' => 1,
      ),
       'uniqueIdentifier' => '5005820d1a9456.93964435',
       'nextPlaceholder' => 0,
       'comments' => 
      array (
      ),
    )); 
  }
  protected function subCondition_start() {
    return array (
      'forUpdate' => false,
      'prepared' => false,
      'union' => 
      array (
      ),
      'range' => NULL,
      'distinct' => false,
      'having->conditions' => 
      array (
        '#conjunction' => 'AND',
      ),
      'where->conditions' => 
      array (
        '#conjunction' => 'AND',
        0 => 
        array (
          'field' => 
          DatabaseCondition::__set_state(array(
             'conditions' => 
            array (
              '#conjunction' => 'OR',
              0 => 
              array (
                'field' => 'b.sticky',
                'value' => 1,
                'operator' => '=',
              ),
              1 => 
              array (
                'field' => 'b.promote',
                'value' => 1,
                'operator' => '=',
              ),
            ),
             'arguments' => 
            array (
            ),
             'changed' => true,
             'queryPlaceholderIdentifier' => NULL,
          )),
          'value' => NULL,
          'operator' => 'IS NULL',
        ),
      ),
      'group' => 
      array (
      ),
      'order' => 
      array (
      ),
      'tables' => 
      array (
        'b' => 
        array (
          'join type' => NULL,
          'table' => 'node',
          'alias' => 'b',
          'condition' => NULL,
          'arguments' => 
          array (
          ),
        ),
        'r' => 
        array (
          'join type' => 'INNER',
          'table' => 'node_revision',
          'alias' => 'r',
          'condition' => 'r.vid = b.vid',
          'arguments' => 
          array (
          ),
        ),
      ),
      'expressions' => 
      array (
      ),
      'fields' => 
      array (
      ),
    );
  }
  protected function noAlter_start() {
    return Drupal\sps\Test\SelectQuery::__set_state(array(
       'fields' => 
      array (
      ),
       'expressions' => 
      array (
      ),
       'tables' => 
      array (
        'b' => 
        array (
          'join type' => NULL,
          'table' => 'node',
          'alias' => 'b',
          'condition' => NULL,
          'arguments' => 
          array (
          ),
        ),
        'r' => 
        array (
          'join type' => 'INNER',
          'table' => 'node_revision',
          'alias' => 'r',
          'condition' => 'r.vid = b.vid',
          'arguments' => 
          array (
          ),
        ),
        'u' => 
        array (
          'join type' => 'INNER',
          'table' => 'user',
          'alias' => 'u',
          'condition' => 'u.uid = b.uid',
          'arguments' => 
          array (
          ),
        ),
      ),
       'order' => 
      array (
      ),
       'group' => 
      array (
        'b.uid' => 'b.uid',
        'u.name' => 'u.name',
      ),
       'where' => 
      Drupal\sps\Test\DatabaseCondition::__set_state(array(
         'conditions' => 
        array (
          '#conjunction' => 'AND',
          0 => 
          array (
            'field' => 
            Drupal\sps\Test\DatabaseCondition::__set_state(array(
               'conditions' => 
              array (
                '#conjunction' => 'OR',
                0 => 
                array (
                  'field' => 'b.sticky',
                  'value' => 1,
                  'operator' => '=',
                ),
                1 => 
                array (
                  'field' => 'b.promote',
                  'value' => 1,
                  'operator' => '=',
                ),
              ),
               'arguments' => 
              array (
              ),
               'changed' => true,
               'queryPlaceholderIdentifier' => NULL,
            )),
            'value' => NULL,
            'operator' => 'IS NULL',
          ),
        ),
         'arguments' => 
        array (
        ),
         'changed' => true,
         'queryPlaceholderIdentifier' => NULL,
      )),
       'having' => 
      Drupal\sps\Test\DatabaseCondition::__set_state(array(
         'conditions' => 
        array (
          '#conjunction' => 'AND',
          0 => 
          array (
            'field' => 'COUNT(b.status) > 1',
            'value' => 
            array (
            ),
            'operator' => NULL,
          ),
        ),
         'arguments' => 
        array (
        ),
         'changed' => true,
         'queryPlaceholderIdentifier' => NULL,
      )),
       'distinct' => false,
       'range' => NULL,
       'union' => 
      array (
      ),
       'prepared' => false,
       'forUpdate' => false,
       'connectionTarget' => 'default',
       'connectionKey' => 'default',
       'queryOptions' => 
      array (
        'target' => 'default',
        'return' => 1,
      ),
       'uniqueIdentifier' => '50059b8a1fbeb1.17192713',
       'nextPlaceholder' => 0,
       'comments' => 
      array (
      ),
       'alterTags' => 
      array (
        'sps_no_alter' => 1,
      ),
    ));
  }
}

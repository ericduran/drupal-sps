<?php
class SPSSiteStateUnitTest extends SPSBaseUnitTest {
  static function getInfo() {
    return array(
      'name' => 'SPS SiteState Unit Tests',
      'description' => 'Test the public interface to the SiteState Object',
      'group' => 'SPS',
    );
  }

  public function testTest_StorageController() {
    $control = new Drupal\sps\Test\StorageController();
    $this->assertCheckInterface('Drupal\sps\StorageControllerInterface', $control, "Test Storage Controller should implement Drupal\sps\StorageControllerInterface");
    $control = new Drupal\sps\Test\StorageController();
    $table = array(
      array(
        'type' => 'thing',
        'id' => 1,
        'revision_id' => 5,
      ),
      array(
        'type' => 'thing',
        'id' => 3,
        'revision_id' => 7,
      ),
    );
    $key = "test_key";
    $control->set($key, $table);
    $this->assertEqual($control->get($key), $table, 'StorageController:: set stores the array to be retrieved by get', 'SPS');
  }
  public function testTestOverride() {
    $table = array(
      array('type' => 'thing', 'id' => 1, 'revision_id' => 5),
      array('type' => 'thing', 'id' => 3, 'revision_id' => 7),
    );
    $manager =  new \Drupal\sps\Test\Manager();
    $override = new \Drupal\sps\Test\Override(array(), $manager);
    $override->setData($table);
    $this->assertEqual($override->getOverrides(), $table, 'Override should take in a table and return it for overrides', 'SPS');

  }

  public function testSiteState() {
    $control = new Drupal\sps\Test\StorageController();
    $table = array(
      array('type' => 'thing', 'id' => 3, 'revision_id' => 7),
      array('type' => 'thing', 'id' => 2, 'revision_id' => 97),
    );
    $manager =  new \Drupal\sps\Test\Manager();
    $override_a = new \Drupal\sps\Test\Override(array(), $manager);
    $override_a->setData($table);
    $site_state = new Drupal\sps\SiteState($control, $override_a);
    $this->assertEqual($site_state->getOverride(), $table, "SiteState::getOverrides should return table given up by controller");
    $override_a->table[0]['id'] = 6;
    $this->assertEqual($site_state->getOverride(), $table, "SiteState::getOverrides should be cached so that changing the controller table should not effect output");
  }

  public function testassertThrows() {
    /*
    $this->assertThrows(function() {
      throw new Drupal\sps\Exception\DoesNotImplementException("baseball");
    ;}, 'Drupal\sps\Exception\DoesNotImplementException', NULL, "message");
    $this->assertThrows(function() {
    ;}, 'Drupal\sps\Exception\DoesNotImplementException', NULL, "message");
    */
  }
}

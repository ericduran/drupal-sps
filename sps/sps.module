<?php

define('SPS_CONFIG_ROOT_CONDITION', "root_condition_settings");
define('SPS_CONFIG_PLUGIN_CONTROLLER', "plugin_controller_settings");
define('SPS_CONFIG_HOOK_CONTROLLER', "hook_controller_settings");
define('SPS_CONFIG_STATE_CONTROLLER', "state_controller_settings");
define('SPS_CONFIG_PREFIX', "sps_config");
define('SPS_NO_ALTER_QUERY_TAG', "sps_no_alter");


/**
 *  Implements hook_sps_plugin_types()
 */
function sps_sps_plugin_types() {
  return array(
    'reaction' => array(
      'interface' => 'Drupal\sps\Plugins\ReactionInterface',
      'default' => array(
        'instance_settings' => array(),
      ),
      'requires' => array(
        'class' => TRUE,
      ),
    ),
  );
}

/**
 * Implements hook_hook_info()
 */
function sps_hook_hook_info() {
  $hooks = array();
  foreach(module_invoke_all("sps_plugin_types") as $name => $type) {
    $hooks["sps_{$name}_plugins"] = array(
      'group' => 'sps_plugins'
    );
  }
}

/**
 * A form callback for use by drupal_get_form().
 *
 * When called like:
 * drupal_get_form('sps_condition_preview_form', array($this, 'getPreviewForm'))
 * by the manager or a condition, it will return that form.
 *
 * @param $form
 * @param $form_state
 *
 * @return array
 *  A FAPI array for drupal_get_form if a callback is provided, or NULL
 *
 * @see \Drupal\sps\Manager::getPreviewForm();
 */
function sps_condition_preview_form($form, &$form_state) {
  if (!empty($form_state['build_info']['args'][0])) {
    $form_function = $form_state['build_info']['args'][0];
    if (is_callable($form_function)) {
      $form = call_user_func_array($form_function, array($form, $form_state));
      return $form;
    }
  }
}

/**
 * A validate callback for forms which will subsequently call the forms
 * #sps_validate function.
 *
 * This allows us to call class methods as form validators.  To use #sps_validate,
 * should be set to a callable item and the form generated through sps_condition_preview_form.
 */
function sps_condition_preview_form_validate($form, &$form_state) {
  if (!empty($form['#sps_validate']) && is_callable($form['#sps_validate'])) {
    call_user_func_array($form['#sps_validate'], array($form, $form_state));
  }
}

/**
 * A submit callback for forms which will subsequently call the forms
 * #sps_submit function.
 *
 * This allows us to call class methods as form submitters.  To use #sps_submit,
 * should be set to a callable item and the form generated through sps_condition_preview_form.
 */
function sps_condition_preview_form_submit($form, &$form_state) {
  if (!empty($form['#sps_submit']) && is_callable($form['#sps_submit'])) {
    call_user_func_array($form['#sps_submit'], array($form, $form_state));
  }
}

/**
 * Get the default Storage Controller
 *
 * @return \Drupal\sps\StorageController\DrupalVariableController
 */
function sps_get_default_config_controller() {
  $controller = &drupal_static(__FUNCTION__);

  if(!isset($controller)) {
    $controller = new \Drupal\sps\StorageController\DrupalVariableController(SPS_CONFIG_PREFIX);
  }

  return $controller;
}

function sps_query_alter($query) {
 // $react = new \Drupal\sps\Plugins\Reaction\QueryAlterReaction(array("tables"=> array("base"=>"node", "revision"=>"node_revision")), "bpb");
//  $react->react($query);
}

function sps_init() {
  $query = db_select("node", 'b');
  $query->join("node_revision", "r", "r.vid = b.vid");
  $query->join("user", "u", "u.uid = b.uid");
  $query->groupBy("b.uid");
  $query->groupBy("u.name");
  $query->having("COUNT(b.status) > 1");
  $query->condition(db_or()->condition("b.sticky", 1)->condition("b.promote", 1));
  $query->addtag("sps_no_alter");

  //dpm(\Drupal\sps\Test\SelectQuery::exportSelect($query));

  //dpm(a());
  //$query->condition("b.status",1);
  //$query->fields("u", array("u.name"));
  //$query->addExpression("b.title is NULL", "expression");
  $query = db_select("node", 'b');
  $query->join("node_revision", "r", "r.vid = b.vid");
  $query->fields("b", array("sticky", "title", "status", "uid", "promote"));
  $query->addExpression("b.title is NULL", "expression");
  $query->condition("b.status",1);
  $query->orderBy("b.sticky");
  $query->orderBy("b.title");
  //dpm(\Drupal\sps\Test\SelectQuery::selectQuery($query));
  //dpm(\Drupal\sps\Test\SelectQuery::exportSelect($query));

}

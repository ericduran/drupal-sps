<?php

define('SPS_CONFIG_ROOT_CONDITION', "root_condition_settings");
define('SPS_CONFIG_PLUGIN_CONTROLLER', "plugin_controller_settings");
define('SPS_CONFIG_HOOK_CONTROLLER', "hook_controller_settings");
define('SPS_CONFIG_STATE_CONTROLLER', "state_controller_settings");
define('SPS_CONFIG_SITESTATE', "sitestate_settings");
define('SPS_CONFIG_OVERRIDE_CONTROLLERS', "override_controllers_settings");
define('SPS_CONFIG_PREFIX', "sps_config");
define('SPS_NO_ALTER_QUERY_TAG', "sps_no_alter");


/**
 *  Implements hook_sps_plugin_types()
 */
function sps_sps_plugin_types() {
  return array(
    'reaction' => array(
      'interface' => 'Drupal\sps\Plugins\ReactionInterface',
      'defaults' => array(
        'instance_settings' => array(),
      ),
      'requires' => array(
        'class' => TRUE,
      ),
    ),
    'override_controller' => array(
      'interface' => 'Drupal\sps\Plugins\OverrideControllerInterface',
      'defaults' => array(
        'instance_settings' => array(),
      ),
      'requires' => array(
        'class' => TRUE,
        'implements_controller_api' => TRUE,
      ),
    ),
  );
}

/**
 * Implements hook_hook_info()
 */
function sps_hook_info() {
  $run = &drupal_static(__FUNCTION__);
  if($run) {
    return array();
  }
  $run = TRUE;
  foreach(module_invoke_all("sps_plugin_types") as $name => $type) {
    $hooks["sps_{$name}_plugins"] = array('group' => 'sps_plugins');
  }
  return $hooks;
}

/**
 * A form callback for use by drupal_get_form().
 *
 * When called like:
 * drupal_get_form('sps_condition_preview_form', array($this, 'getPreviewForm'))
 * by the manager or a condition, it will return that form.
 *
 * @param $form
 * @param $form_state
 *
 * @return array
 *  A FAPI array for drupal_get_form if a callback is provided, or NULL
 *
 * @see \Drupal\sps\Manager::getPreviewForm();
 */
function sps_condition_preview_form($form, &$form_state) {
  if (!empty($form_state['build_info']['args'][0])) {
    $form_function = $form_state['build_info']['args'][0];
    if (is_callable($form_function)) {
      $form = call_user_func_array($form_function, array($form, $form_state));
      return $form;
    }
  }
}

/**
 * A validate callback for forms which will subsequently call the forms
 * #sps_validate function.
 *
 * This allows us to call class methods as form validators.  To use #sps_validate,
 * should be set to a callable item and the form generated through sps_condition_preview_form.
 */
function sps_condition_preview_form_validate($form, &$form_state) {
  if (!empty($form['#sps_validate']) && is_callable($form['#sps_validate'])) {
    call_user_func_array($form['#sps_validate'], array($form, $form_state));
  }
}

/**
 * A submit callback for forms which will subsequently call the forms
 * #sps_submit function.
 *
 * This allows us to call class methods as form submitters.  To use #sps_submit,
 * should be set to a callable item and the form generated through sps_condition_preview_form.
 */
function sps_condition_preview_form_submit($form, &$form_state) {
  if (!empty($form['#sps_submit']) && is_callable($form['#sps_submit'])) {
    call_user_func_array($form['#sps_submit'], array($form, $form_state));
  }
}

/**
 * Get the default Storage Controller
 *
 * @return \Drupal\sps\StorageController\DrupalVariableController
 */
function sps_get_default_config_controller() {
  $controller = &drupal_static(__FUNCTION__);

  if(!isset($controller)) {
    $controller = new \Drupal\sps\StorageController\DrupalVariableController(SPS_CONFIG_PREFIX);
    $controller->set(SPS_CONFIG_STATE_CONTROLLER, array('class'=> '\Drupal\sps\Test\StateController', 'instance_settings' => array()));
  }

  return $controller;
}

/**
 * Get the default Manager
 *
 * @return \Drupal\sps\Manager
 */
function sps_get_manager() {
  $manager = &drupal_static(__FUNCTION__);

  if(!isset($manager)) {
    $manager = new \Drupal\sps\Manager(sps_get_default_config_controller());
  }

  return $manager;
}
/**
 * implements hook_query_alter()
 * 
 * This is done on behave of the node_select_query_alter reaction
 */
function sps_query_alter($query) {
  $data = new stdClass();
  $data->query=$query;
  sps_get_manager()->react('node_select_query_alter', $data);
}

function sps_init() {

  if(isset($_GET['doit'])) {
    $manager = sps_get_manager();

    $override = new Drupal\sps\Test\Override(array(), $manager);
    $override->setData(array(
      array("id" => 1,"revision_id" => 1 , "type" => 'node'),
      array("id" => 2,"revision_id" => 5 , "type" => 'node')
    ));
    $condition = new Drupal\sps\Test\Condition(array('override' => $override), $manager);
    $condition->override_set = TRUE;
    $manager->setSiteState($condition);
  };
}

